var requirejs, require, define;
(function (global) {
  var req,
    s,
    head,
    baseElement,
    dataMain,
    src,
    interactiveScript,
    currentlyAddingScript,
    mainScript,
    subPath,
    version = "2.1.11",
    commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,
    cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
    jsSuffixRegExp = /\.js$/,
    currDirRegExp = /^\.\//,
    op = Object.prototype,
    ostring = op.toString,
    hasOwn = op.hasOwnProperty,
    ap = Array.prototype,
    apsp = ap.splice,
    isBrowser = !!(
      typeof window !== "undefined" &&
      typeof navigator !== "undefined" &&
      window.document
    ),
    isWebWorker = !isBrowser && typeof importScripts !== "undefined",
    readyRegExp =
      isBrowser && navigator.platform === "PLAYSTATION 3"
        ? /^complete$/
        : /^(complete|loaded)$/,
    defContextName = "_",
    isOpera =
      typeof opera !== "undefined" && opera.toString() === "[object Opera]",
    contexts = {},
    cfg = {},
    globalDefQueue = [],
    useInteractive = false;
  function isFunction(it) {
    return ostring.call(it) === "[object Function]";
  }
  function isArray(it) {
    return ostring.call(it) === "[object Array]";
  }
  function each(ary, func) {
    if (ary) {
      var i;
      for (i = 0; i < ary.length; i += 1) {
        if (ary[i] && func(ary[i], i, ary)) {
          break;
        }
      }
    }
  }
  function eachReverse(ary, func) {
    if (ary) {
      var i;
      for (i = ary.length - 1; i > -1; i -= 1) {
        if (ary[i] && func(ary[i], i, ary)) {
          break;
        }
      }
    }
  }
  function hasProp(obj, prop) {
    return hasOwn.call(obj, prop);
  }
  function getOwn(obj, prop) {
    return hasProp(obj, prop) && obj[prop];
  }
  function eachProp(obj, func) {
    var prop;
    for (prop in obj) {
      if (hasProp(obj, prop)) {
        if (func(obj[prop], prop)) {
          break;
        }
      }
    }
  }
  function mixin(target, source, force, deepStringMixin) {
    if (source) {
      eachProp(source, function (value, prop) {
        if (force || !hasProp(target, prop)) {
          if (
            deepStringMixin &&
            typeof value === "object" &&
            value &&
            !isArray(value) &&
            !isFunction(value) &&
            !(value instanceof RegExp)
          ) {
            if (!target[prop]) {
              target[prop] = {};
            }
            mixin(target[prop], value, force, deepStringMixin);
          } else {
            target[prop] = value;
          }
        }
      });
    }
    return target;
  }
  function bind(obj, fn) {
    return function () {
      return fn.apply(obj, arguments);
    };
  }
  function scripts() {
    return document.getElementsByTagName("script");
  }
  function defaultOnError(err) {
    throw err;
  }
  function getGlobal(value) {
    if (!value) {
      return value;
    }
    var g = global;
    each(value.split("."), function (part) {
      g = g[part];
    });
    return g;
  }
  function makeError(id, msg, err, requireModules) {
    var e = new Error(msg + "\nhttp://requirejs.org/docs/errors.html#" + id);
    e.requireType = id;
    e.requireModules = requireModules;
    if (err) {
      e.originalError = err;
    }
    return e;
  }
  if (typeof define !== "undefined") {
    return;
  }
  if (typeof requirejs !== "undefined") {
    if (isFunction(requirejs)) {
      return;
    }
    cfg = requirejs;
    requirejs = undefined;
  }
  if (typeof require !== "undefined" && !isFunction(require)) {
    cfg = require;
    require = undefined;
  }
  function newContext(contextName) {
    var inCheckLoaded,
      Module,
      context,
      handlers,
      checkLoadedTimeoutId,
      config = {
        waitSeconds: 7,
        baseUrl: "./",
        paths: {},
        bundles: {},
        pkgs: {},
        shim: {},
        config: {},
      },
      registry = {},
      enabledRegistry = {},
      undefEvents = {},
      defQueue = [],
      defined = {},
      urlFetched = {},
      bundlesMap = {},
      requireCounter = 1,
      unnormalizedCounter = 1;
    function trimDots(ary) {
      var i,
        part,
        length = ary.length;
      for (i = 0; i < length; i++) {
        part = ary[i];
        if (part === ".") {
          ary.splice(i, 1);
          i -= 1;
        } else if (part === "..") {
          if (i === 1 && (ary[2] === ".." || ary[0] === "..")) {
            break;
          } else if (i > 0) {
            ary.splice(i - 1, 2);
            i -= 2;
          }
        }
      }
    }
    function normalize(name, baseName, applyMap) {
      var pkgMain,
        mapValue,
        nameParts,
        i,
        j,
        nameSegment,
        lastIndex,
        foundMap,
        foundI,
        foundStarMap,
        starI,
        baseParts = baseName && baseName.split("/"),
        normalizedBaseParts = baseParts,
        map = config.map,
        starMap = map && map["*"];
      if (name && name.charAt(0) === ".") {
        if (baseName) {
          normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
          name = name.split("/");
          lastIndex = name.length - 1;
          if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
            name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, "");
          }
          name = normalizedBaseParts.concat(name);
          trimDots(name);
          name = name.join("/");
        } else if (name.indexOf("./") === 0) {
          name = name.substring(2);
        }
      }
      if (applyMap && map && (baseParts || starMap)) {
        nameParts = name.split("/");
        outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
          nameSegment = nameParts.slice(0, i).join("/");
          if (baseParts) {
            for (j = baseParts.length; j > 0; j -= 1) {
              mapValue = getOwn(map, baseParts.slice(0, j).join("/"));
              if (mapValue) {
                mapValue = getOwn(mapValue, nameSegment);
                if (mapValue) {
                  foundMap = mapValue;
                  foundI = i;
                  break outerLoop;
                }
              }
            }
          }
          if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
            foundStarMap = getOwn(starMap, nameSegment);
            starI = i;
          }
        }
        if (!foundMap && foundStarMap) {
          foundMap = foundStarMap;
          foundI = starI;
        }
        if (foundMap) {
          nameParts.splice(0, foundI, foundMap);
          name = nameParts.join("/");
        }
      }
      pkgMain = getOwn(config.pkgs, name);
      return pkgMain ? pkgMain : name;
    }
    function removeScript(name) {
      if (isBrowser) {
        each(scripts(), function (scriptNode) {
          if (
            scriptNode.getAttribute("data-requiremodule") === name &&
            scriptNode.getAttribute("data-requirecontext") ===
              context.contextName
          ) {
            scriptNode.parentNode.removeChild(scriptNode);
            return true;
          }
        });
      }
    }
    function hasPathFallback(id) {
      var pathConfig = getOwn(config.paths, id);
      if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
        pathConfig.shift();
        context.require.undef(id);
        context.require([id]);
        return true;
      }
    }
    function splitPrefix(name) {
      var prefix,
        index = name ? name.indexOf("!") : -1;
      if (index > -1) {
        prefix = name.substring(0, index);
        name = name.substring(index + 1, name.length);
      }
      return [prefix, name];
    }
    function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
      var url,
        pluginModule,
        suffix,
        nameParts,
        prefix = null,
        parentName = parentModuleMap ? parentModuleMap.name : null,
        originalName = name,
        isDefine = true,
        normalizedName = "";
      if (!name) {
        isDefine = false;
        name = "_@r" + (requireCounter += 1);
      }
      nameParts = splitPrefix(name);
      prefix = nameParts[0];
      name = nameParts[1];
      if (prefix) {
        prefix = normalize(prefix, parentName, applyMap);
        pluginModule = getOwn(defined, prefix);
      }
      if (name) {
        if (prefix) {
          if (pluginModule && pluginModule.normalize) {
            normalizedName = pluginModule.normalize(name, function (name) {
              return normalize(name, parentName, applyMap);
            });
          } else {
            normalizedName = normalize(name, parentName, applyMap);
          }
        } else {
          normalizedName = normalize(name, parentName, applyMap);
          nameParts = splitPrefix(normalizedName);
          prefix = nameParts[0];
          normalizedName = nameParts[1];
          isNormalized = true;
          url = context.nameToUrl(normalizedName);
        }
      }
      suffix =
        prefix && !pluginModule && !isNormalized
          ? "_unnormalized" + (unnormalizedCounter += 1)
          : "";
      return {
        prefix: prefix,
        name: normalizedName,
        parentMap: parentModuleMap,
        unnormalized: !!suffix,
        url: url,
        originalName: originalName,
        isDefine: isDefine,
        id: (prefix ? prefix + "!" + normalizedName : normalizedName) + suffix,
      };
    }
    function getModule(depMap) {
      var id = depMap.id,
        mod = getOwn(registry, id);
      if (!mod) {
        mod = registry[id] = new context.Module(depMap);
      }
      return mod;
    }
    function on(depMap, name, fn) {
      var id = depMap.id,
        mod = getOwn(registry, id);
      if (hasProp(defined, id) && (!mod || mod.defineEmitComplete)) {
        if (name === "defined") {
          fn(defined[id]);
        }
      } else {
        mod = getModule(depMap);
        if (mod.error && name === "error") {
          fn(mod.error);
        } else {
          mod.on(name, fn);
        }
      }
    }
    function onError(err, errback) {
      var ids = err.requireModules,
        notified = false;
      if (errback) {
        errback(err);
      } else {
        each(ids, function (id) {
          var mod = getOwn(registry, id);
          if (mod) {
            mod.error = err;
            if (mod.events.error) {
              notified = true;
              mod.emit("error", err);
            }
          }
        });
        if (!notified) {
          req.onError(err);
        }
      }
    }
    function takeGlobalQueue() {
      if (globalDefQueue.length) {
        apsp.apply(defQueue, [defQueue.length, 0].concat(globalDefQueue));
        globalDefQueue = [];
      }
    }
    handlers = {
      require: function (mod) {
        if (mod.require) {
          return mod.require;
        } else {
          return (mod.require = context.makeRequire(mod.map));
        }
      },
      exports: function (mod) {
        mod.usingExports = true;
        if (mod.map.isDefine) {
          if (mod.exports) {
            return (defined[mod.map.id] = mod.exports);
          } else {
            return (mod.exports = defined[mod.map.id] = {});
          }
        }
      },
      module: function (mod) {
        if (mod.module) {
          return mod.module;
        } else {
          return (mod.module = {
            id: mod.map.id,
            uri: mod.map.url,
            config: function () {
              return getOwn(config.config, mod.map.id) || {};
            },
            exports: mod.exports || (mod.exports = {}),
          });
        }
      },
    };
    function cleanRegistry(id) {
      delete registry[id];
      delete enabledRegistry[id];
    }
    function breakCycle(mod, traced, processed) {
      var id = mod.map.id;
      if (mod.error) {
        mod.emit("error", mod.error);
      } else {
        traced[id] = true;
        each(mod.depMaps, function (depMap, i) {
          var depId = depMap.id,
            dep = getOwn(registry, depId);
          if (dep && !mod.depMatched[i] && !processed[depId]) {
            if (getOwn(traced, depId)) {
              mod.defineDep(i, defined[depId]);
              mod.check();
            } else {
              breakCycle(dep, traced, processed);
            }
          }
        });
        processed[id] = true;
      }
    }
    function checkLoaded() {
      var err,
        usingPathFallback,
        waitInterval = config.waitSeconds * 1000,
        expired =
          waitInterval &&
          context.startTime + waitInterval < new Date().getTime(),
        noLoads = [],
        reqCalls = [],
        stillLoading = false,
        needCycleCheck = true;
      if (inCheckLoaded) {
        return;
      }
      inCheckLoaded = true;
      eachProp(enabledRegistry, function (mod) {
        var map = mod.map,
          modId = map.id;
        if (!mod.enabled) {
          return;
        }
        if (!map.isDefine) {
          reqCalls.push(mod);
        }
        if (!mod.error) {
          if (!mod.inited && expired) {
            if (hasPathFallback(modId)) {
              usingPathFallback = true;
              stillLoading = true;
            } else {
              noLoads.push(modId);
              removeScript(modId);
            }
          } else if (!mod.inited && mod.fetched && map.isDefine) {
            stillLoading = true;
            if (!map.prefix) {
              return (needCycleCheck = false);
            }
          }
        }
      });
      if (expired && noLoads.length) {
        err = makeError(
          "timeout",
          "Load timeout for modules: " + noLoads,
          null,
          noLoads
        );
        err.contextName = context.contextName;
        return onError(err);
      }
      if (needCycleCheck) {
        each(reqCalls, function (mod) {
          breakCycle(mod, {}, {});
        });
      }
      if ((!expired || usingPathFallback) && stillLoading) {
        if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
          checkLoadedTimeoutId = setTimeout(function () {
            checkLoadedTimeoutId = 0;
            checkLoaded();
          }, 50);
        }
      }
      inCheckLoaded = false;
    }
    Module = function (map) {
      this.events = getOwn(undefEvents, map.id) || {};
      this.map = map;
      this.shim = getOwn(config.shim, map.id);
      this.depExports = [];
      this.depMaps = [];
      this.depMatched = [];
      this.pluginMaps = {};
      this.depCount = 0;
    };
    Module.prototype = {
      init: function (depMaps, factory, errback, options) {
        options = options || {};
        if (this.inited) {
          return;
        }
        this.factory = factory;
        if (errback) {
          this.on("error", errback);
        } else if (this.events.error) {
          errback = bind(this, function (err) {
            this.emit("error", err);
          });
        }
        this.depMaps = depMaps && depMaps.slice(0);
        this.errback = errback;
        this.inited = true;
        this.ignore = options.ignore;
        if (options.enabled || this.enabled) {
          this.enable();
        } else {
          this.check();
        }
      },
      defineDep: function (i, depExports) {
        if (!this.depMatched[i]) {
          this.depMatched[i] = true;
          this.depCount -= 1;
          this.depExports[i] = depExports;
        }
      },
      fetch: function () {
        if (this.fetched) {
          return;
        }
        this.fetched = true;
        context.startTime = new Date().getTime();
        var map = this.map;
        if (this.shim) {
          context.makeRequire(this.map, { enableBuildCallback: true })(
            this.shim.deps || [],
            bind(this, function () {
              return map.prefix ? this.callPlugin() : this.load();
            })
          );
        } else {
          return map.prefix ? this.callPlugin() : this.load();
        }
      },
      load: function () {
        var url = this.map.url;
        if (!urlFetched[url]) {
          urlFetched[url] = true;
          context.load(this.map.id, url);
        }
      },
      check: function () {
        if (!this.enabled || this.enabling) {
          return;
        }
        var err,
          cjsModule,
          id = this.map.id,
          depExports = this.depExports,
          exports = this.exports,
          factory = this.factory;
        if (!this.inited) {
          this.fetch();
        } else if (this.error) {
          this.emit("error", this.error);
        } else if (!this.defining) {
          this.defining = true;
          if (this.depCount < 1 && !this.defined) {
            if (isFunction(factory)) {
              if (
                (this.events.error && this.map.isDefine) ||
                req.onError !== defaultOnError
              ) {
                try {
                  exports = context.execCb(id, factory, depExports, exports);
                } catch (e) {
                  err = e;
                }
              } else {
                exports = context.execCb(id, factory, depExports, exports);
              }
              if (this.map.isDefine && exports === undefined) {
                cjsModule = this.module;
                if (cjsModule) {
                  exports = cjsModule.exports;
                } else if (this.usingExports) {
                  exports = this.exports;
                }
              }
              if (err) {
                err.requireMap = this.map;
                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                err.requireType = this.map.isDefine ? "define" : "require";
                return onError((this.error = err));
              }
            } else {
              exports = factory;
            }
            this.exports = exports;
            if (this.map.isDefine && !this.ignore) {
              defined[id] = exports;
              if (req.onResourceLoad) {
                req.onResourceLoad(context, this.map, this.depMaps);
              }
            }
            cleanRegistry(id);
            this.defined = true;
          }
          this.defining = false;
          if (this.defined && !this.defineEmitted) {
            this.defineEmitted = true;
            this.emit("defined", this.exports);
            this.defineEmitComplete = true;
          }
        }
      },
      callPlugin: function () {
        var map = this.map,
          id = map.id,
          pluginMap = makeModuleMap(map.prefix);
        this.depMaps.push(pluginMap);
        on(
          pluginMap,
          "defined",
          bind(this, function (plugin) {
            var load,
              normalizedMap,
              normalizedMod,
              bundleId = getOwn(bundlesMap, this.map.id),
              name = this.map.name,
              parentName = this.map.parentMap ? this.map.parentMap.name : null,
              localRequire = context.makeRequire(map.parentMap, {
                enableBuildCallback: true,
              });
            if (this.map.unnormalized) {
              if (plugin.normalize) {
                name =
                  plugin.normalize(name, function (name) {
                    return normalize(name, parentName, true);
                  }) || "";
              }
              normalizedMap = makeModuleMap(
                map.prefix + "!" + name,
                this.map.parentMap
              );
              on(
                normalizedMap,
                "defined",
                bind(this, function (value) {
                  this.init(
                    [],
                    function () {
                      return value;
                    },
                    null,
                    { enabled: true, ignore: true }
                  );
                })
              );
              normalizedMod = getOwn(registry, normalizedMap.id);
              if (normalizedMod) {
                this.depMaps.push(normalizedMap);
                if (this.events.error) {
                  normalizedMod.on(
                    "error",
                    bind(this, function (err) {
                      this.emit("error", err);
                    })
                  );
                }
                normalizedMod.enable();
              }
              return;
            }
            if (bundleId) {
              this.map.url = context.nameToUrl(bundleId);
              this.load();
              return;
            }
            load = bind(this, function (value) {
              this.init(
                [],
                function () {
                  return value;
                },
                null,
                { enabled: true }
              );
            });
            load.error = bind(this, function (err) {
              this.inited = true;
              this.error = err;
              err.requireModules = [id];
              eachProp(registry, function (mod) {
                if (mod.map.id.indexOf(id + "_unnormalized") === 0) {
                  cleanRegistry(mod.map.id);
                }
              });
              onError(err);
            });
            load.fromText = bind(this, function (text, textAlt) {
              var moduleName = map.name,
                moduleMap = makeModuleMap(moduleName),
                hasInteractive = useInteractive;
              if (textAlt) {
                text = textAlt;
              }
              if (hasInteractive) {
                useInteractive = false;
              }
              getModule(moduleMap);
              if (hasProp(config.config, id)) {
                config.config[moduleName] = config.config[id];
              }
              try {
                req.exec(text);
              } catch (e) {
                return onError(
                  makeError(
                    "fromtexteval",
                    "fromText eval for " + id + " failed: " + e,
                    e,
                    [id]
                  )
                );
              }
              if (hasInteractive) {
                useInteractive = true;
              }
              this.depMaps.push(moduleMap);
              context.completeLoad(moduleName);
              localRequire([moduleName], load);
            });
            plugin.load(map.name, localRequire, load, config);
          })
        );
        context.enable(pluginMap, this);
        this.pluginMaps[pluginMap.id] = pluginMap;
      },
      enable: function () {
        enabledRegistry[this.map.id] = this;
        this.enabled = true;
        this.enabling = true;
        each(
          this.depMaps,
          bind(this, function (depMap, i) {
            var id, mod, handler;
            if (typeof depMap === "string") {
              depMap = makeModuleMap(
                depMap,
                this.map.isDefine ? this.map : this.map.parentMap,
                false,
                !this.skipMap
              );
              this.depMaps[i] = depMap;
              handler = getOwn(handlers, depMap.id);
              if (handler) {
                this.depExports[i] = handler(this);
                return;
              }
              this.depCount += 1;
              on(
                depMap,
                "defined",
                bind(this, function (depExports) {
                  this.defineDep(i, depExports);
                  this.check();
                })
              );
              if (this.errback) {
                on(depMap, "error", bind(this, this.errback));
              }
            }
            id = depMap.id;
            mod = registry[id];
            if (!hasProp(handlers, id) && mod && !mod.enabled) {
              context.enable(depMap, this);
            }
          })
        );
        eachProp(
          this.pluginMaps,
          bind(this, function (pluginMap) {
            var mod = getOwn(registry, pluginMap.id);
            if (mod && !mod.enabled) {
              context.enable(pluginMap, this);
            }
          })
        );
        this.enabling = false;
        this.check();
      },
      on: function (name, cb) {
        var cbs = this.events[name];
        if (!cbs) {
          cbs = this.events[name] = [];
        }
        cbs.push(cb);
      },
      emit: function (name, evt) {
        each(this.events[name], function (cb) {
          cb(evt);
        });
        if (name === "error") {
          delete this.events[name];
        }
      },
    };
    function callGetModule(args) {
      if (!hasProp(defined, args[0])) {
        getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
      }
    }
    function removeListener(node, func, name, ieName) {
      if (node.detachEvent && !isOpera) {
        if (ieName) {
          node.detachEvent(ieName, func);
        }
      } else {
        node.removeEventListener(name, func, false);
      }
    }
    function getScriptData(evt) {
      var node = evt.currentTarget || evt.srcElement;
      removeListener(node, context.onScriptLoad, "load", "onreadystatechange");
      removeListener(node, context.onScriptError, "error");
      return {
        node: node,
        id: node && node.getAttribute("data-requiremodule"),
      };
    }
    function intakeDefines() {
      var args;
      takeGlobalQueue();
      while (defQueue.length) {
        args = defQueue.shift();
        if (args[0] === null) {
          return onError(
            makeError(
              "mismatch",
              "Mismatched anonymous define() module: " + args[args.length - 1]
            )
          );
        } else {
          callGetModule(args);
        }
      }
    }
    context = {
      config: config,
      contextName: contextName,
      registry: registry,
      defined: defined,
      urlFetched: urlFetched,
      defQueue: defQueue,
      Module: Module,
      makeModuleMap: makeModuleMap,
      nextTick: req.nextTick,
      onError: onError,
      configure: function (cfg) {
        if (cfg.baseUrl) {
          if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== "/") {
            cfg.baseUrl += "/";
          }
        }
        var shim = config.shim,
          objs = { paths: true, bundles: true, config: true, map: true };
        eachProp(cfg, function (value, prop) {
          if (objs[prop]) {
            if (!config[prop]) {
              config[prop] = {};
            }
            mixin(config[prop], value, true, true);
          } else {
            config[prop] = value;
          }
        });
        if (cfg.bundles) {
          eachProp(cfg.bundles, function (value, prop) {
            each(value, function (v) {
              if (v !== prop) {
                bundlesMap[v] = prop;
              }
            });
          });
        }
        if (cfg.shim) {
          eachProp(cfg.shim, function (value, id) {
            if (isArray(value)) {
              value = { deps: value };
            }
            if ((value.exports || value.init) && !value.exportsFn) {
              value.exportsFn = context.makeShimExports(value);
            }
            shim[id] = value;
          });
          config.shim = shim;
        }
        if (cfg.packages) {
          each(cfg.packages, function (pkgObj) {
            var location, name;
            pkgObj = typeof pkgObj === "string" ? { name: pkgObj } : pkgObj;
            name = pkgObj.name;
            location = pkgObj.location;
            if (location) {
              config.paths[name] = pkgObj.location;
            }
            config.pkgs[name] =
              pkgObj.name +
              "/" +
              (pkgObj.main || "main")
                .replace(currDirRegExp, "")
                .replace(jsSuffixRegExp, "");
          });
        }
        eachProp(registry, function (mod, id) {
          if (!mod.inited && !mod.map.unnormalized) {
            mod.map = makeModuleMap(id);
          }
        });
        if (cfg.deps || cfg.callback) {
          context.require(cfg.deps || [], cfg.callback);
        }
      },
      makeShimExports: function (value) {
        function fn() {
          var ret;
          if (value.init) {
            ret = value.init.apply(global, arguments);
          }
          return ret || (value.exports && getGlobal(value.exports));
        }
        return fn;
      },
      makeRequire: function (relMap, options) {
        options = options || {};
        function localRequire(deps, callback, errback) {
          var id, map, requireMod;
          if (options.enableBuildCallback && callback && isFunction(callback)) {
            callback.__requireJsBuild = true;
          }
          if (typeof deps === "string") {
            if (isFunction(callback)) {
              return onError(
                makeError("requireargs", "Invalid require call"),
                errback
              );
            }
            if (relMap && hasProp(handlers, deps)) {
              return handlers[deps](registry[relMap.id]);
            }
            if (req.get) {
              return req.get(context, deps, relMap, localRequire);
            }
            map = makeModuleMap(deps, relMap, false, true);
            id = map.id;
            if (!hasProp(defined, id)) {
              return onError(
                makeError(
                  "notloaded",
                  'Module name "' +
                    id +
                    '" has not been loaded yet for context: ' +
                    contextName +
                    (relMap ? "" : ". Use require([])")
                )
              );
            }
            return defined[id];
          }
          intakeDefines();
          context.nextTick(function () {
            intakeDefines();
            requireMod = getModule(makeModuleMap(null, relMap));
            requireMod.skipMap = options.skipMap;
            requireMod.init(deps, callback, errback, { enabled: true });
            checkLoaded();
          });
          return localRequire;
        }
        mixin(localRequire, {
          isBrowser: isBrowser,
          toUrl: function (moduleNamePlusExt) {
            var ext,
              index = moduleNamePlusExt.lastIndexOf("."),
              segment = moduleNamePlusExt.split("/")[0],
              isRelative = segment === "." || segment === "..";
            if (index !== -1 && (!isRelative || index > 1)) {
              ext = moduleNamePlusExt.substring(
                index,
                moduleNamePlusExt.length
              );
              moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
            }
            return context.nameToUrl(
              normalize(moduleNamePlusExt, relMap && relMap.id, true),
              ext,
              true
            );
          },
          defined: function (id) {
            return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
          },
          specified: function (id) {
            id = makeModuleMap(id, relMap, false, true).id;
            return hasProp(defined, id) || hasProp(registry, id);
          },
        });
        if (!relMap) {
          localRequire.undef = function (id) {
            takeGlobalQueue();
            var map = makeModuleMap(id, relMap, true),
              mod = getOwn(registry, id);
            removeScript(id);
            delete defined[id];
            delete urlFetched[map.url];
            delete undefEvents[id];
            eachReverse(defQueue, function (args, i) {
              if (args[0] === id) {
                defQueue.splice(i, 1);
              }
            });
            if (mod) {
              if (mod.events.defined) {
                undefEvents[id] = mod.events;
              }
              cleanRegistry(id);
            }
          };
        }
        return localRequire;
      },
      enable: function (depMap) {
        var mod = getOwn(registry, depMap.id);
        if (mod) {
          getModule(depMap).enable();
        }
      },
      completeLoad: function (moduleName) {
        var found,
          args,
          mod,
          shim = getOwn(config.shim, moduleName) || {},
          shExports = shim.exports;
        takeGlobalQueue();
        while (defQueue.length) {
          args = defQueue.shift();
          if (args[0] === null) {
            args[0] = moduleName;
            if (found) {
              break;
            }
            found = true;
          } else if (args[0] === moduleName) {
            found = true;
          }
          callGetModule(args);
        }
        mod = getOwn(registry, moduleName);
        if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
          if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
            if (hasPathFallback(moduleName)) {
              return;
            } else {
              return onError(
                makeError(
                  "nodefine",
                  "No define call for " + moduleName,
                  null,
                  [moduleName]
                )
              );
            }
          } else {
            callGetModule([moduleName, shim.deps || [], shim.exportsFn]);
          }
        }
        checkLoaded();
      },
      nameToUrl: function (moduleName, ext, skipExt) {
        var paths,
          syms,
          i,
          parentModule,
          url,
          parentPath,
          bundleId,
          pkgMain = getOwn(config.pkgs, moduleName);
        if (pkgMain) {
          moduleName = pkgMain;
        }
        bundleId = getOwn(bundlesMap, moduleName);
        if (bundleId) {
          return context.nameToUrl(bundleId, ext, skipExt);
        }
        if (req.jsExtRegExp.test(moduleName)) {
          url = moduleName + (ext || "");
        } else {
          paths = config.paths;
          syms = moduleName.split("/");
          for (i = syms.length; i > 0; i -= 1) {
            parentModule = syms.slice(0, i).join("/");
            parentPath = getOwn(paths, parentModule);
            if (parentPath) {
              if (isArray(parentPath)) {
                parentPath = parentPath[0];
              }
              syms.splice(0, i, parentPath);
              break;
            }
          }
          url = syms.join("/");
          url += ext || (/^data\:|\?/.test(url) || skipExt ? "" : ".js");
          url =
            (url.charAt(0) === "/" || url.match(/^[\w\+\.\-]+:/)
              ? ""
              : config.baseUrl) + url;
        }
        return config.urlArgs
          ? url + ((url.indexOf("?") === -1 ? "?" : "&") + config.urlArgs)
          : url;
      },
      load: function (id, url) {
        req.load(context, id, url);
      },
      execCb: function (name, callback, args, exports) {
        return callback.apply(exports, args);
      },
      onScriptLoad: function (evt) {
        if (
          evt.type === "load" ||
          readyRegExp.test((evt.currentTarget || evt.srcElement).readyState)
        ) {
          interactiveScript = null;
          var data = getScriptData(evt);
          context.completeLoad(data.id);
        }
      },
      onScriptError: function (evt) {
        var data = getScriptData(evt);
        if (!hasPathFallback(data.id)) {
          return onError(
            makeError("scripterror", "Script error for: " + data.id, evt, [
              data.id,
            ])
          );
        }
      },
    };
    context.require = context.makeRequire();
    return context;
  }
  req = requirejs = function (deps, callback, errback, optional) {
    var context,
      config,
      contextName = defContextName;
    if (!isArray(deps) && typeof deps !== "string") {
      config = deps;
      if (isArray(callback)) {
        deps = callback;
        callback = errback;
        errback = optional;
      } else {
        deps = [];
      }
    }
    if (config && config.context) {
      contextName = config.context;
    }
    context = getOwn(contexts, contextName);
    if (!context) {
      context = contexts[contextName] = req.s.newContext(contextName);
    }
    if (config) {
      context.configure(config);
    }
    return context.require(deps, callback, errback);
  };
  req.config = function (config) {
    return req(config);
  };
  req.nextTick =
    typeof setTimeout !== "undefined"
      ? function (fn) {
          setTimeout(fn, 4);
        }
      : function (fn) {
          fn();
        };
  if (!require) {
    require = req;
  }
  req.version = version;
  req.jsExtRegExp = /^\/|:|\?|\.js$/;
  req.isBrowser = isBrowser;
  s = req.s = { contexts: contexts, newContext: newContext };
  req({});
  each(["toUrl", "undef", "defined", "specified"], function (prop) {
    req[prop] = function () {
      var ctx = contexts[defContextName];
      return ctx.require[prop].apply(ctx, arguments);
    };
  });
  if (isBrowser) {
    head = s.head = document.getElementsByTagName("head")[0];
    baseElement = document.getElementsByTagName("base")[0];
    if (baseElement) {
      head = s.head = baseElement.parentNode;
    }
  }
  req.onError = defaultOnError;
  req.createNode = function (config, moduleName, url) {
    var node = config.xhtml
      ? document.createElementNS("http://www.w3.org/1999/xhtml", "html:script")
      : document.createElement("script");
    node.type = config.scriptType || "text/javascript";
    node.charset = "utf-8";
    node.async = true;
    return node;
  };
  req.load = function (context, moduleName, url) {
    var config = (context && context.config) || {},
      node;
    if (isBrowser) {
      node = req.createNode(config, moduleName, url);
      node.setAttribute("data-requirecontext", context.contextName);
      node.setAttribute("data-requiremodule", moduleName);
      if (
        node.attachEvent &&
        !(
          node.attachEvent.toString &&
          node.attachEvent.toString().indexOf("[native code") < 0
        ) &&
        !isOpera
      ) {
        useInteractive = true;
        node.attachEvent("onreadystatechange", context.onScriptLoad);
      } else {
        node.addEventListener("load", context.onScriptLoad, false);
        node.addEventListener("error", context.onScriptError, false);
      }
      node.src = url;
      currentlyAddingScript = node;
      if (baseElement) {
        head.insertBefore(node, baseElement);
      } else {
        head.appendChild(node);
      }
      currentlyAddingScript = null;
      return node;
    } else if (isWebWorker) {
      try {
        importScripts(url);
        context.completeLoad(moduleName);
      } catch (e) {
        context.onError(
          makeError(
            "importscripts",
            "importScripts failed for " + moduleName + " at " + url,
            e,
            [moduleName]
          )
        );
      }
    }
  };
  function getInteractiveScript() {
    if (interactiveScript && interactiveScript.readyState === "interactive") {
      return interactiveScript;
    }
    eachReverse(scripts(), function (script) {
      if (script.readyState === "interactive") {
        return (interactiveScript = script);
      }
    });
    return interactiveScript;
  }
  if (isBrowser && !cfg.skipDataMain) {
    eachReverse(scripts(), function (script) {
      if (!head) {
        head = script.parentNode;
      }
      dataMain = script.getAttribute("data-main");
      if (dataMain) {
        mainScript = dataMain;
        if (!cfg.baseUrl) {
          src = mainScript.split("/");
          mainScript = src.pop();
          subPath = src.length ? src.join("/") + "/" : "./";
          cfg.baseUrl = subPath;
        }
        mainScript = mainScript.replace(jsSuffixRegExp, "");
        if (req.jsExtRegExp.test(mainScript)) {
          mainScript = dataMain;
        }
        cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];
        return true;
      }
    });
  }
  define = function (name, deps, callback) {
    var node, context;
    if (typeof name !== "string") {
      callback = deps;
      deps = name;
      name = null;
    }
    if (!isArray(deps)) {
      callback = deps;
      deps = null;
    }
    if (!deps && isFunction(callback)) {
      deps = [];
      if (callback.length) {
        callback
          .toString()
          .replace(commentRegExp, "")
          .replace(cjsRequireRegExp, function (match, dep) {
            deps.push(dep);
          });
        deps = (callback.length === 1
          ? ["require"]
          : ["require", "exports", "module"]
        ).concat(deps);
      }
    }
    if (useInteractive) {
      node = currentlyAddingScript || getInteractiveScript();
      if (node) {
        if (!name) {
          name = node.getAttribute("data-requiremodule");
        }
        context = contexts[node.getAttribute("data-requirecontext")];
      }
    }
    (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
  };
  define.amd = { jQuery: true };
  req.exec = function (text) {
    return eval(text);
  };
  req(cfg);
})(this);
(function () {
  var ctx = require.s.contexts._,
    origNameToUrl = ctx.nameToUrl,
    baseUrl = ctx.config.baseUrl;
  ctx.nameToUrl = function () {
    var url = origNameToUrl.apply(ctx, arguments);
    if (
      url.indexOf(baseUrl) === 0 &&
      !url.match(/\/tiny_mce\//) &&
      !url.match(/\/v1\/songbird/) &&
      !url.match(/\/pay.google.com\//)
    ) {
      url = url.replace(/(\.min)?\.js$/, ".min.js");
    }
    return url;
  };
})();
define("mixins", ["module"], function (module) {
  "use strict";
  var contexts = require.s.contexts,
    defContextName = "_",
    defContext = contexts[defContextName],
    unbundledContext = require.s.newContext("$"),
    defaultConfig = defContext.config,
    unbundledConfig = {
      baseUrl: defaultConfig.baseUrl,
      paths: defaultConfig.paths,
      shim: defaultConfig.shim,
      config: defaultConfig.config,
      map: defaultConfig.map,
    },
    rjsMixins;
  unbundledContext.configure(unbundledConfig);
  function hasPlugin(name) {
    return !!~name.indexOf("!");
  }
  function addPlugin(name) {
    return "mixins!" + name;
  }
  function removeBaseUrl(url, config) {
    var baseUrl = config.baseUrl || "",
      index = url.indexOf(baseUrl);
    if (~index) {
      url = url.substring(baseUrl.length - index);
    }
    return url;
  }
  function getPath(name, config) {
    var url = unbundledContext.require.toUrl(name);
    return removeBaseUrl(url, config);
  }
  function isRelative(name) {
    return !!~name.indexOf("./");
  }
  function applyMixins(target) {
    var mixins = Array.prototype.slice.call(arguments, 1);
    mixins.forEach(function (mixin) {
      target = mixin(target);
    });
    return target;
  }
  rjsMixins = {
    load: function (name, req, onLoad, config) {
      var path = getPath(name, config),
        mixins = this.getMixins(path),
        deps = [name].concat(mixins);
      req(deps, function () {
        onLoad(applyMixins.apply(null, arguments));
      });
    },
    getMixins: function (path) {
      var config = module.config() || {},
        mixins;
      if (path.indexOf("?") !== -1) {
        path = path.substring(0, path.indexOf("?"));
      }
      mixins = config[path] || {};
      return Object.keys(mixins).filter(function (mixin) {
        return mixins[mixin] !== false;
      });
    },
    hasMixins: function (path) {
      return this.getMixins(path).length;
    },
    processNames: function (names, context) {
      var config = context.config;
      function processName(name) {
        var path = getPath(name, config);
        if (
          !hasPlugin(name) &&
          (isRelative(name) || rjsMixins.hasMixins(path))
        ) {
          return addPlugin(name);
        }
        return name;
      }
      return typeof names !== "string"
        ? names.map(processName)
        : processName(names);
    },
  };
  return rjsMixins;
});
require(["mixins"], function (mixins) {
  "use strict";
  var contexts = require.s.contexts,
    defContextName = "_",
    defContext = contexts[defContextName],
    originalContextRequire = defContext.require,
    processNames = mixins.processNames;
  defContext.require = function (deps, callback, errback) {
    deps = processNames(deps, defContext);
    return originalContextRequire(deps, callback, errback);
  };
  Object.keys(originalContextRequire).forEach(function (key) {
    defContext.require[key] = originalContextRequire[key];
  });
  defContext.defQueue.shift = function () {
    var queueItem = Array.prototype.shift.call(this),
      lastDeps = queueItem && queueItem[1];
    if (Array.isArray(lastDeps)) {
      queueItem[1] = processNames(queueItem[1], defContext);
    }
    return queueItem;
  };
});
(function (require) {
  (function () {
    var config = {
      waitSeconds: 0,
      map: {
        "*": {
          ko: "knockoutjs/knockout",
          knockout: "knockoutjs/knockout",
          mageUtils: "mage/utils/main",
          rjsResolver: "mage/requirejs/resolver",
        },
      },
      shim: {
        "jquery/jquery-migrate": ["jquery"],
        "jquery/jstree/jquery.hotkeys": ["jquery"],
        "jquery/hover-intent": ["jquery"],
        "mage/adminhtml/backup": ["prototype"],
        "mage/captcha": ["prototype"],
        "mage/new-gallery": ["jquery"],
        "mage/webapi": ["jquery"],
        "jquery/ui": ["jquery"],
        MutationObserver: ["es6-collections"],
        matchMedia: { exports: "mediaCheck" },
        "magnifier/magnifier": ["jquery"],
      },
      paths: {
        "jquery/validate": "jquery/jquery.validate",
        "jquery/hover-intent": "jquery/jquery.hoverIntent",
        "jquery/file-uploader": "jquery/fileUploader/jquery.fileuploader",
        prototype: "legacy-build.min",
        "jquery/jquery-storageapi": "jquery/jquery.storageapi.min",
        text: "mage/requirejs/text",
        domReady: "requirejs/domReady",
        spectrum: "jquery/spectrum/spectrum",
        tinycolor: "jquery/spectrum/tinycolor",
        "jquery-ui-modules": "jquery/ui-modules",
      },
      deps: ["jquery/jquery-migrate"],
      config: {
        mixins: {
          "jquery/jstree/jquery.jstree": { "mage/backend/jstree-mixin": true },
          jquery: { "jquery/patches/jquery": true },
        },
        text: { headers: { "X-Requested-With": "XMLHttpRequest" } },
      },
    };
    require(["jquery"], function ($) {
      "use strict";
      $.noConflict();
    });
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          rowBuilder: "Magento_Theme/js/row-builder",
          toggleAdvanced: "mage/toggle",
          translateInline: "mage/translate-inline",
          sticky: "mage/sticky",
          tabs: "mage/tabs",
          zoom: "mage/zoom",
          collapsible: "mage/collapsible",
          dropdownDialog: "mage/dropdown",
          dropdown: "mage/dropdowns",
          accordion: "mage/accordion",
          loader: "mage/loader",
          tooltip: "mage/tooltip",
          deletableItem: "mage/deletable-item",
          itemTable: "mage/item-table",
          fieldsetControls: "mage/fieldset-controls",
          fieldsetResetControl: "mage/fieldset-controls",
          redirectUrl: "mage/redirect-url",
          loaderAjax: "mage/loader",
          menu: "mage/menu",
          popupWindow: "mage/popup-window",
          validation: "mage/validation/validation",
          breadcrumbs: "Magento_Theme/js/view/breadcrumbs",
          "jquery/ui": "jquery/compat",
          cookieStatus: "Magento_Theme/js/cookie-status",
        },
      },
      deps: [
        "jquery/jquery.mobile.custom",
        "mage/common",
        "mage/dataPost",
        "mage/bootstrap",
      ],
      config: {
        mixins: {
          "Magento_Theme/js/view/breadcrumbs": {
            "Magento_Theme/js/view/add-home-breadcrumb": true,
          },
          "jquery/ui-modules/dialog": { "jquery/patches/jquery-ui": true },
        },
      },
    };
    if (typeof window !== "undefined" && window.document) {
      try {
        if (!window.localStorage || !window.sessionStorage) {
          throw new Error();
        }
        localStorage.setItem("storage_test", 1);
        localStorage.removeItem("storage_test");
      } catch (e) {
        config.deps.push("mage/polyfill");
      }
    }
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          quickSearch: "Magento_Search/js/form-mini",
          "Magento_Search/form-mini": "Magento_Search/js/form-mini",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          checkoutBalance: "Magento_Customer/js/checkout-balance",
          address: "Magento_Customer/js/address",
          changeEmailPassword: "Magento_Customer/js/change-email-password",
          passwordStrengthIndicator:
            "Magento_Customer/js/password-strength-indicator",
          zxcvbn: "Magento_Customer/js/zxcvbn",
          addressValidation: "Magento_Customer/js/addressValidation",
          "Magento_Customer/address": "Magento_Customer/js/address",
          "Magento_Customer/change-email-password":
            "Magento_Customer/js/change-email-password",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = { map: { "*": { escaper: "Magento_Security/js/escaper" } } };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          compareList: "Magento_Catalog/js/list",
          relatedProducts: "Magento_Catalog/js/related-products",
          upsellProducts: "Magento_Catalog/js/upsell-products",
          productListToolbarForm: "Magento_Catalog/js/product/list/toolbar",
          catalogGallery: "Magento_Catalog/js/gallery",
          catalogAddToCart: "Magento_Catalog/js/catalog-add-to-cart",
        },
      },
      config: {
        mixins: {
          "Magento_Theme/js/view/breadcrumbs": {
            "Magento_Catalog/js/product/breadcrumbs": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          priceBox: "Magento_Catalog/js/price-box",
          priceOptionDate: "Magento_Catalog/js/price-option-date",
          priceOptionFile: "Magento_Catalog/js/price-option-file",
          priceOptions: "Magento_Catalog/js/price-options",
          priceUtils: "Magento_Catalog/js/price-utils",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          creditCardType: "Magento_Payment/js/cc-type",
          "Magento_Payment/cc-type": "Magento_Payment/js/cc-type",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = { map: { "*": { addToCart: "Magento_Msrp/js/msrp" } } };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          giftMessage: "Magento_Sales/js/gift-message",
          ordersReturns: "Magento_Sales/js/orders-returns",
          "Magento_Sales/gift-message": "Magento_Sales/js/gift-message",
          "Magento_Sales/orders-returns": "Magento_Sales/js/orders-returns",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          discountCode: "Magento_Checkout/js/discount-codes",
          shoppingCart: "Magento_Checkout/js/shopping-cart",
          regionUpdater: "Magento_Checkout/js/region-updater",
          sidebar: "Magento_Checkout/js/sidebar",
          checkoutLoader: "Magento_Checkout/js/checkout-loader",
          checkoutData: "Magento_Checkout/js/checkout-data",
          proceedToCheckout: "Magento_Checkout/js/proceed-to-checkout",
          catalogAddToCart: "Magento_Catalog/js/catalog-add-to-cart",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          requireCookie: "Magento_Cookie/js/require-cookie",
          cookieNotices: "Magento_Cookie/js/notices",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      paths: {
        "jquery/jquery-storageapi":
          "Magento_Cookie/js/jquery.storageapi.extended",
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          downloadable: "Magento_Downloadable/js/downloadable",
          "Magento_Downloadable/downloadable":
            "Magento_Downloadable/js/downloadable",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          captcha: "Magento_Captcha/js/captcha",
          "Magento_Captcha/captcha": "Magento_Captcha/js/captcha",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": { configurable: "Magento_ConfigurableProduct/js/configurable" },
      },
      config: {
        mixins: {
          "Magento_Catalog/js/catalog-add-to-cart": {
            "Magento_ConfigurableProduct/js/catalog-add-to-cart-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: { "*": { catalogSearch: "Magento_CatalogSearch/form-mini" } },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          giftOptions: "Magento_GiftMessage/js/gift-options",
          extraOptions: "Magento_GiftMessage/js/extra-options",
          "Magento_GiftMessage/gift-options":
            "Magento_GiftMessage/js/gift-options",
          "Magento_GiftMessage/extra-options":
            "Magento_GiftMessage/js/extra-options",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      deps: [],
      shim: {
        "chartjs/Chart.min": ["moment"],
        "tiny_mce_4/tinymce.min": { exports: "tinyMCE" },
      },
      paths: { "ui/template": "Magento_Ui/templates" },
      map: {
        "*": {
          uiElement: "Magento_Ui/js/lib/core/element/element",
          uiCollection: "Magento_Ui/js/lib/core/collection",
          uiComponent: "Magento_Ui/js/lib/core/collection",
          uiClass: "Magento_Ui/js/lib/core/class",
          uiEvents: "Magento_Ui/js/lib/core/events",
          uiRegistry: "Magento_Ui/js/lib/registry/registry",
          consoleLogger: "Magento_Ui/js/lib/logger/console-logger",
          uiLayout: "Magento_Ui/js/core/renderer/layout",
          buttonAdapter: "Magento_Ui/js/form/button-adapter",
          chartJs: "chartjs/Chart.min",
          tinymce4: "tiny_mce_4/tinymce.min",
          wysiwygAdapter: "mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter",
        },
      },
    };
    if (typeof window !== "undefined" && window.document) {
      if (typeof Map === "undefined" || typeof WeakMap === "undefined") {
        config.deps.push("es6-collections");
      }
      if (typeof MutationObserver === "undefined") {
        config.deps.push("MutationObserver");
      }
      if (
        typeof FormData === "undefined" ||
        typeof FormData.prototype.get === "undefined"
      ) {
        config.deps.push("FormData");
      }
    }
    require.config(config);
  })();
  (function () {
    var config = {
      map: { "*": { pageCache: "Magento_PageCache/js/page-cache" } },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          bundleOption: "Magento_Bundle/bundle",
          priceBundle: "Magento_Bundle/js/price-bundle",
          slide: "Magento_Bundle/js/slide",
          productSummary: "Magento_Bundle/js/product-summary",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          multiShipping: "Magento_Multishipping/js/multi-shipping",
          orderOverview: "Magento_Multishipping/js/overview",
          payment: "Magento_Multishipping/js/payment",
          billingLoader: "Magento_Checkout/js/checkout-loader",
          cartUpdate: "Magento_Checkout/js/action/update-shopping-cart",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": { recentlyViewedProducts: "Magento_Reports/js/recently-viewed" },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Checkout/js/model/quote": {
            "Magento_InventoryInStorePickupFrontend/js/model/quote-ext": true,
          },
          "Magento_Checkout/js/view/shipping-information": {
            "Magento_InventoryInStorePickupFrontend/js/view/shipping-information-ext": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          subscriptionStatusResolver:
            "Magento_Newsletter/js/subscription-status-resolver",
          newsletterSignUp: "Magento_Newsletter/js/newsletter-sign-up",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Checkout/js/action/select-payment-method": {
            "Magento_SalesRule/js/action/select-payment-method-mixin": true,
          },
          "Magento_Checkout/js/model/shipping-save-processor": {
            "Magento_SalesRule/js/model/shipping-save-processor-mixin": true,
          },
          "Magento_Checkout/js/action/place-order": {
            "Magento_SalesRule/js/model/place-order-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      shim: {
        cardinaljs: { exports: "Cardinal" },
        cardinaljsSandbox: { exports: "Cardinal" },
      },
      paths: {
        cardinaljsSandbox:
          "https://includestest.ccdc02.com/cardinalcruise/v1/songbird",
        cardinaljs: "https://songbird.cardinalcommerce.com/edge/v1/songbird",
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          transparent: "Magento_Payment/js/transparent",
          "Magento_Payment/transparent": "Magento_Payment/js/transparent",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          orderReview: "Magento_Paypal/js/order-review",
          "Magento_Paypal/order-review": "Magento_Paypal/js/order-review",
          paypalCheckout: "Magento_Paypal/js/paypal-checkout",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Customer/js/customer-data": {
            "Magento_Persistent/js/view/customer-data-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          loadPlayer: "Magento_ProductVideo/js/load-player",
          fotoramaVideoEvents:
            "Magento_ProductVideo/js/fotorama-add-video-events",
        },
      },
      shim: { vimeoAPI: {} },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Checkout/js/action/place-order": {
            "Magento_CheckoutAgreements/js/model/place-order-mixin": true,
          },
          "Magento_Checkout/js/action/set-payment-information": {
            "Magento_CheckoutAgreements/js/model/set-payment-information-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    "use strict";
    var config = {
      config: {
        mixins: {
          "Magento_Ui/js/view/messages": {
            "Magento_ReCaptchaFrontendUi/js/ui-messages-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Paypal/js/view/payment/method-renderer/payflowpro-method": {
            "Magento_ReCaptchaPaypal/js/payflowpro-method-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      shim: {
        "Magento_Tinymce3/tiny_mce/tiny_mce_src": { exports: "tinymce" },
      },
      map: {
        "*": { tinymceDeprecated: "Magento_Tinymce3/tiny_mce/tiny_mce_src" },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          editTrigger: "mage/edit-trigger",
          addClass: "Magento_Translation/js/add-class",
          "Magento_Translation/add-class": "Magento_Translation/js/add-class",
        },
      },
      deps: ["mage/translate-inline"],
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          mageTranslationDictionary:
            "Magento_Translation/js/mage-translation-dictionary",
        },
      },
      deps: ["mageTranslationDictionary"],
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Checkout/js/view/payment/list": {
            "Magento_PaypalCaptcha/js/view/payment/list-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          taxToggle: "Magento_Weee/js/tax-toggle",
          "Magento_Weee/tax-toggle": "Magento_Weee/js/tax-toggle",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          wishlist: "Magento_Wishlist/js/wishlist",
          addToWishlist: "Magento_Wishlist/js/add-to-wishlist",
          wishlistSearch: "Magento_Wishlist/js/search",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          amazonLogout: "Amazon_Login/js/amazon-logout",
          amazonOAuthRedirect: "Amazon_Login/js/amazon-redirect",
          amazonCsrf: "Amazon_Login/js/amazon-csrf",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          amazonCore: "Amazon_Payment/js/amazon-core",
          amazonWidgetsLoader: "Amazon_Payment/js/amazon-widgets-loader",
          amazonButton: "Amazon_Payment/js/amazon-button",
          amazonProductAdd: "Amazon_Payment/js/amazon-product-add",
          amazonPaymentConfig: "Amazon_Payment/js/model/amazonPaymentConfig",
          sjcl: "Amazon_Payment/js/lib/sjcl.min",
        },
      },
      config: {
        mixins: {
          "Amazon_Payment/js/action/place-order": {
            "Amazon_Payment/js/model/place-order-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Checkout/js/action/get-payment-information": {
            "Klarna_Kp/js/action/override": true,
          },
        },
      },
      map: { "*": { klarnapi: "https://x.klarnacdn.net/kp/lib/v1/api.js" } },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Catalog/js/price-box": {
            "Klarna_Onsitemessaging/js/pricebox-widget-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          braintree:
            "https://js.braintreegateway.com/web/3.63.0/js/client.min.js",
        },
      },
      paths: {
        braintreePayPalCheckout:
          "https://js.braintreegateway.com/web/3.63.0/js/paypal-checkout.min",
        braintreeHostedFields:
          "https://js.braintreegateway.com/web/3.63.0/js/hosted-fields.min",
        braintreeDataCollector:
          "https://js.braintreegateway.com/web/3.63.0/js/data-collector.min",
        braintreeThreeDSecure:
          "https://js.braintreegateway.com/web/3.63.0/js/three-d-secure.min",
        braintreeApplePay:
          "https://js.braintreegateway.com/web/3.63.0/js/apple-pay.min",
        braintreeGooglePay:
          "https://js.braintreegateway.com/web/3.63.0/js/google-payment.min",
        braintreeVenmo:
          "https://js.braintreegateway.com/web/3.63.0/js/venmo.min",
        braintreeAch:
          "https://js.braintreegateway.com/web/3.63.0/js/us-bank-account.min",
        braintreeLpm:
          "https://js.braintreegateway.com/web/3.63.0/js/local-payment.min",
        googlePayLibrary: "https://pay.google.com/gp/p/js/pay",
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Checkout/js/model/step-navigator": {
            "PayPal_Braintree/js/model/step-navigator-mixin": true,
          },
        },
      },
      map: {
        "*": {
          braintreeCheckoutPayPalAdapter:
            "PayPal_Braintree/js/view/payment/adapter",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          "rokanthemes/ajaxsuite": "Rokanthemes_AjaxSuite/js/ajaxsuite",
          "Rokanthemes_AjaxSuite/js/model/ajaxsuite-popup":
            "Rokanthemes_AjaxSuite/js/model/ajaxsuite-popup",
          "Magento_Customer/template/authentication-popup":
            "Rokanthemes_AjaxSuite/template/authentication-popup",
          "Magento_Customer/js/model/authentication-popup":
            "Rokanthemes_AjaxSuite/js/model/authentication-popup",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          conflict: "Rokanthemes_Brand/js/conflict",
          owlcarousel: "Rokanthemes_Brand/js/owl.carousel",
          boostrap: "Rokanthemes_Brand/js/bootstrap.min",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      shim: { "rokanthemes/custommenu": ["jquery"] },
      paths: {
        "rokanthemes/custommenu": "Rokanthemes_CustomMenu/js/custommenu",
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          "Magento_Checkout/template/billing-address/form.html":
            "Rokanthemes_OnePageCheckout/template/billing-address/form.html",
          "Magento_Checkout/js/model/shipping-rate-service":
            "Rokanthemes_OnePageCheckout/js/model/shipping-rate-service",
          "Magento_Checkout/js/action/get-payment-information":
            "Rokanthemes_OnePageCheckout/js/action/get-payment-information",
        },
      },
      config: {
        mixins: {
          "Magento_Checkout/js/action/place-order": {
            "Rokanthemes_OnePageCheckout/js/model/place-order-mixin": true,
            "Magento_CheckoutAgreements/js/model/place-order-mixin": false,
          },
          "Magento_Checkout/js/model/step-navigator": {
            "Rokanthemes_OnePageCheckout/js/model/step-navigator-mixin": true,
          },
          "Magento_Checkout/js/action/set-payment-information": {
            "Magento_CheckoutAgreements/js/model/set-payment-information-mixin": false,
            "Rokanthemes_OnePageCheckout/js/model/set-payment-information-mixin": true,
          },
          "Magento_Checkout/js/model/shipping-rates-validation-rules": {
            "Rokanthemes_OnePageCheckout/js/model/shipping-rates-validation-rules-mixin": true,
          },
          "Magento_Paypal/js/in-context/express-checkout-wrapper": {
            "Rokanthemes_OnePageCheckout/js/paypal/in-context/express-checkout-wrapper-mixin": true,
          },
          "Magento_Paypal/js/view/payment/method-renderer/in-context/checkout-express": {
            "Rokanthemes_OnePageCheckout/js/paypal/view/payment/method-renderer/in-context/checkout-express": true,
          },
          "Amazon_Payment/js/view/payment/list": {
            "Rokanthemes_OnePageCheckout/js/amazon-pay/view/payment-list": true,
          },
          "Amazon_Payment/js/view/checkout-revert": {
            "Rokanthemes_OnePageCheckout/js/amazon-pay/view/checkout-revert-rewrite": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: { "*": { "rokanthemes/timer": "Rokanthemes_PriceCountdown/js" } },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: { "*": { productQuickview: "Rokanthemes_QuickView/js/quickview" } },
      shim: {
        "quickview/cloudzoom": ["jquery"],
        "quickview/bxslider": ["jquery"],
      },
      paths: {
        "quickview/cloudzoom": "Rokanthemes_QuickView/js/cloud-zoom",
        "quickview/bxslider": "Rokanthemes_QuickView/js/jquery.bxslider",
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          catalogAddToCart: "Rokanthemes_RokanBase/js/catalog-add-to-cart",
          "Magento_Catalog/js/catalog-add-to-cart":
            "Rokanthemes_RokanBase/js/catalog-add-to-cart",
        },
      },
      shim: {
        "rokanthemes/owl": ["jquery"],
        "rokanthemes/elevatezoom": ["jquery"],
        "rokanthemes/choose": ["jquery"],
        "rokanthemes/fancybox": ["jquery"],
        "rokanthemes/lazyloadimg": ["jquery"],
      },
      paths: {
        "rokanthemes/fancybox": "Rokanthemes_RokanBase/js/jquery_fancybox",
        "rokanthemes/owl": "Rokanthemes_RokanBase/js/owl_carousel",
        "rokanthemes/elevatezoom":
          "Rokanthemes_RokanBase/js/jquery.elevatezoom",
        "rokanthemes/choose": "Rokanthemes_RokanBase/js/jquery_choose",
        "rokanthemes/equalheight": "Rokanthemes_RokanBase/js/equalheight",
        "rokanthemes/lazyloadimg":
          "Rokanthemes_RokanBase/js/jquery.lazyload.min",
      },
      deps: ["rokanthemes/theme"],
    };
    require.config(config);
  })();
  (function () {
    var config = {
      shim: { "rokanthemes/verticalmenu": ["jquery"] },
      paths: {
        "rokanthemes/verticalmenu": "Rokanthemes_VerticalMenu/js/verticalmenu",
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      map: {
        "*": {
          "set-checkout-messages": "Vertex_Tax/js/model/set-checkout-messages",
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = {
      config: {
        mixins: {
          "Magento_Checkout/js/view/billing-address": {
            "Vertex_AddressValidation/js/billing-validation-mixin": true,
          },
          "Magento_Checkout/js/view/shipping": {
            "Vertex_AddressValidation/js/shipping-validation-mixin": true,
          },
          "Magento_Checkout/js/checkout-data": {
            "Vertex_AddressValidation/js/shipping-invalidate-mixin": true,
          },
          "Magento_Customer/js/addressValidation": {
            "Vertex_AddressValidation/js/customer-validation-mixin": true,
          },
        },
      },
    };
    require.config(config);
  })();
  (function () {
    var config = { deps: ["Magento_Theme/js/theme"] };
    require.config(config);
  })();
})(require);
var j = 1;
if (typeof BackColor == "undefined") BackColor = "white";
if (typeof ForeColor == "undefined") ForeColor = "black";
if (typeof DisplayFormat == "undefined")
  DisplayFormat =
    "<span class='day'>%%D%%</span><span style='margin:0px 4px'>:</span><span class='hour'>%%H%%</span><span style='margin:0px 4px'>:</span><span class='min'>%%M%%</span><span style='margin:0px 4px'>:</span><span class='sec'>%%S%%</span>";
if (typeof CountActive == "undefined") CountActive = true;
if (typeof FinishMessage == "undefined") FinishMessage = "";
if (typeof CountStepper != "number") CountStepper = -1;
if (typeof LeadingZero == "undefined") LeadingZero = true;
CountStepper = Math.ceil(CountStepper);
if (CountStepper == 0) CountActive = false;
var SetTimeOutPeriod = (Math.abs(CountStepper) - 1) * 1000 + 990;
function calcage(secs, num1, num2) {
  s = (Math.floor(secs / num1) % num2).toString();
  if (LeadingZero && s.length < 2) s = "0" + s;
  return "<b>" + s + "</b>";
}
function CountBack_slider(secs, iid, j_timer) {
  if (secs < 0) {
    document.getElementById(iid).innerHTML = FinishMessage;
    document.getElementById("caption" + j_timer).style.display = "none";
    document.getElementById("heading" + j_timer).style.display = "none";
    return;
  }
  DisplayStr = DisplayFormat.replace(/%%D%%/g, calcage(secs, 86400, 100000));
  DisplayStr = DisplayStr.replace(/%%H%%/g, calcage(secs, 3600, 24));
  DisplayStr = DisplayStr.replace(/%%M%%/g, calcage(secs, 60, 60));
  DisplayStr = DisplayStr.replace(/%%S%%/g, calcage(secs, 1, 60));
  var elems = document.getElementsByTagName("*"),
    i;
  for (i in elems) {
    if ((" " + elems[i].className + " ").indexOf(" " + iid + " ") > -1) {
      elems[i].innerHTML = DisplayStr;
    }
  }
  if (CountActive)
    setTimeout(function () {
      CountBack_slider(secs + CountStepper, iid, j_timer);
    }, SetTimeOutPeriod);
}
function CountBack(secs, iid, j) {
  if (secs < 0) {
    document.getElementById(iid).innerHTML = FinishMessage;
    document.getElementById("caption" + j).style.display = "none";
    document.getElementById("heading" + j).style.display = "none";
    return;
  }
  DisplayStr = DisplayFormat.replace(/%%D%%/g, calcage(secs, 86400, 100000));
  DisplayStr = DisplayStr.replace(/%%H%%/g, calcage(secs, 3600, 24));
  DisplayStr = DisplayStr.replace(/%%M%%/g, calcage(secs, 60, 60));
  DisplayStr = DisplayStr.replace(/%%S%%/g, calcage(secs, 1, 60));
  document.getElementById(iid).innerHTML = DisplayStr;
  if (CountActive)
    setTimeout(function () {
      CountBack(secs + CountStepper, iid, j);
    }, SetTimeOutPeriod);
} /*================================================================================
 * @name: bPopup - if you can't get it up, use bPopup
 * @author: (c)Bjoern Klinggaard (twitter@bklinggaard)
 * @demo: http://dinbror.dk/bpopup
 * @version: 0.9.4.min
 ================================================================================*/
require(["jquery"], function ($) {
  (function (b) {
    b.fn.bPopup = function (z, F) {
      function K() {
        a.contentContainer = b(a.contentContainer || c);
        switch (a.content) {
          case "iframe":
            var h = b(
              '<iframe class="b-iframe" ' + a.iframeAttr + "></iframe>"
            );
            h.appendTo(a.contentContainer);
            r = c.outerHeight(!0);
            s = c.outerWidth(!0);
            A();
            h.attr("src", a.loadUrl);
            k(a.loadCallback);
            break;
          case "image":
            A();
            b("<img />")
              .load(function () {
                k(a.loadCallback);
                G(b(this));
              })
              .attr("src", a.loadUrl)
              .hide()
              .appendTo(a.contentContainer);
            break;
          default:
            A(),
              b('<div class="b-ajax-wrapper"></div>')
                .load(a.loadUrl, a.loadData, function () {
                  k(a.loadCallback);
                  G(b(this));
                })
                .hide()
                .appendTo(a.contentContainer);
        }
      }
      function A() {
        a.modal &&
          b('<div class="b-modal ' + e + '"></div>')
            .css({
              backgroundColor: a.modalColor,
              position: "fixed",
              top: 0,
              right: 0,
              bottom: 0,
              left: 0,
              opacity: 0,
              zIndex: a.zIndex + t,
            })
            .appendTo(a.appendTo)
            .fadeTo(a.speed, a.opacity);
        D();
        c.data("bPopup", a)
          .data("id", e)
          .css({
            left:
              "slideIn" == a.transition || "slideBack" == a.transition
                ? "slideBack" == a.transition
                  ? g.scrollLeft() + u
                  : -1 * (v + s)
                : l(!((!a.follow[0] && m) || f)),
            position: a.positionStyle || "absolute",
            top:
              "slideDown" == a.transition || "slideUp" == a.transition
                ? "slideUp" == a.transition
                  ? g.scrollTop() + w
                  : x + -1 * r
                : n(!((!a.follow[1] && p) || f)),
            "z-index": a.zIndex + t + 1,
          })
          .each(function () {
            a.appending && b(this).appendTo(a.appendTo);
          });
        H(!0);
      }
      function q() {
        a.modal &&
          b(".b-modal." + c.data("id")).fadeTo(a.speed, 0, function () {
            b(this).remove();
          });
        a.scrollBar || b("html").css("overflow", "auto");
        b(".b-modal." + e).unbind("click");
        g.unbind("keydown." + e);
        d.unbind("." + e).data(
          "bPopup",
          0 < d.data("bPopup") - 1 ? d.data("bPopup") - 1 : null
        );
        c.undelegate(".bClose, ." + a.closeClass, "click." + e, q).data(
          "bPopup",
          null
        );
        H();
        return !1;
      }
      function G(h) {
        var b = h.width(),
          e = h.height(),
          d = {};
        a.contentContainer.css({ height: e, width: b });
        e >= c.height() && (d.height = c.height());
        b >= c.width() && (d.width = c.width());
        r = c.outerHeight(!0);
        s = c.outerWidth(!0);
        D();
        a.contentContainer.css({ height: "auto", width: "auto" });
        d.left = l(!((!a.follow[0] && m) || f));
        d.top = n(!((!a.follow[1] && p) || f));
        c.animate(d, 250, function () {
          h.show();
          B = E();
        });
      }
      function L() {
        d.data("bPopup", t);
        c.delegate(".bClose, ." + a.closeClass, "click." + e, q);
        a.modalClose &&
          b(".b-modal." + e)
            .css("cursor", "pointer")
            .bind("click", q);
        M ||
          (!a.follow[0] && !a.follow[1]) ||
          d
            .bind("scroll." + e, function () {
              B &&
                c
                  .dequeue()
                  .animate(
                    {
                      left: a.follow[0] ? l(!f) : "auto",
                      top: a.follow[1] ? n(!f) : "auto",
                    },
                    a.followSpeed,
                    a.followEasing
                  );
            })
            .bind("resize." + e, function () {
              w = y.innerHeight || d.height();
              u = y.innerWidth || d.width();
              if ((B = E()))
                clearTimeout(I),
                  (I = setTimeout(function () {
                    D();
                    c.dequeue().each(function () {
                      f
                        ? b(this).css({ left: v, top: x })
                        : b(this).animate(
                            {
                              left: a.follow[0] ? l(!0) : "auto",
                              top: a.follow[1] ? n(!0) : "auto",
                            },
                            a.followSpeed,
                            a.followEasing
                          );
                    });
                  }, 50));
            });
        a.escClose &&
          g.bind("keydown." + e, function (a) {
            27 == a.which && q();
          });
      }
      function H(b) {
        function d(e) {
          c.css({ display: "block", opacity: 1 }).animate(
            e,
            a.speed,
            a.easing,
            function () {
              J(b);
            }
          );
        }
        switch (b ? a.transition : a.transitionClose || a.transition) {
          case "slideIn":
            d({
              left: b
                ? l(!((!a.follow[0] && m) || f))
                : g.scrollLeft() - (s || c.outerWidth(!0)) - C,
            });
            break;
          case "slideBack":
            d({
              left: b ? l(!((!a.follow[0] && m) || f)) : g.scrollLeft() + u + C,
            });
            break;
          case "slideDown":
            d({
              top: b
                ? n(!((!a.follow[1] && p) || f))
                : g.scrollTop() - (r || c.outerHeight(!0)) - C,
            });
            break;
          case "slideUp":
            d({
              top: b ? n(!((!a.follow[1] && p) || f)) : g.scrollTop() + w + C,
            });
            break;
          default:
            c.stop().fadeTo(a.speed, b ? 1 : 0, function () {
              J(b);
            });
        }
      }
      function J(b) {
        b
          ? (L(), k(F), a.autoClose && setTimeout(q, a.autoClose))
          : (c.hide(),
            k(a.onClose),
            a.loadUrl &&
              (a.contentContainer.empty(),
              c.css({ height: "auto", width: "auto" })));
      }
      function l(a) {
        return a ? v + g.scrollLeft() : v;
      }
      function n(a) {
        return a ? x + g.scrollTop() : x;
      }
      function k(a) {
        b.isFunction(a) && a.call(c);
      }
      function D() {
        x = p
          ? a.position[1]
          : Math.max(0, (w - c.outerHeight(!0)) / 2 - a.amsl);
        v = m ? a.position[0] : (u - c.outerWidth(!0)) / 2;
        B = E();
      }
      function E() {
        return w > c.outerHeight(!0) && u > c.outerWidth(!0);
      }
      b.isFunction(z) && ((F = z), (z = null));
      var a = b.extend({}, b.fn.bPopup.defaults, z);
      a.scrollBar || b("html").css("overflow", "hidden");
      var c = this,
        g = b(document),
        y = window,
        d = b(y),
        w = y.innerHeight || d.height(),
        u = y.innerWidth || d.width(),
        M = /OS 6(_\d)+/i.test(navigator.userAgent),
        C = 200,
        t = 0,
        e,
        B,
        p,
        m,
        f,
        x,
        v,
        r,
        s,
        I;
      c.close = function () {
        a = this.data("bPopup");
        e = "__b-popup" + d.data("bPopup") + "__";
        q();
      };
      return c.each(function () {
        b(this).data("bPopup") ||
          (k(a.onOpen),
          (t = (d.data("bPopup") || 0) + 1),
          (e = "__b-popup" + t + "__"),
          (p = "auto" !== a.position[1]),
          (m = "auto" !== a.position[0]),
          (f = "fixed" === a.positionStyle),
          (r = c.outerHeight(!0)),
          (s = c.outerWidth(!0)),
          a.loadUrl ? K() : A());
      });
    };
    b.fn.bPopup.defaults = {
      amsl: 50,
      appending: !0,
      appendTo: "body",
      autoClose: !1,
      closeClass: "b-close",
      content: "ajax",
      contentContainer: !1,
      easing: "swing",
      escClose: !0,
      follow: [!0, !0],
      followEasing: "swing",
      followSpeed: 500,
      iframeAttr: 'scrolling="no" frameborder="0"',
      loadCallback: !1,
      loadData: !1,
      loadUrl: !1,
      modal: !0,
      modalClose: !0,
      modalColor: "#000",
      onClose: !1,
      onOpen: !1,
      opacity: 0.7,
      position: ["auto", "auto"],
      positionStyle: "absolute",
      scrollBar: !0,
      speed: 250,
      transition: "fadeIn",
      transitionClose: !1,
      zIndex: 9997,
    };
  })(jQuery);
});
